
/*
   How it works:
   We need to get the switch player values
   One full set up circle
   Rotate
   Sample
   If there is a hit, (already at angle)
   Sound Alarm, Fire x seconds
   Back to rotation
*/

#include <NewPing.h>
#include <Sonar.h>

//LED
#define LEDPIN 11
#define LED_FREQUENCY_HZ 4500
#define KILLALLTIME_MS 3000

// Frequencies
#define FREQ0 1471 // Hz
#define FREQ1 1724 // Hz
#define FREQ2 2000 // Hz
#define FREQ3 2273 // Hz
#define FREQ4 2632 // Hz
#define FREQ5 2941 // Hz
#define FREQ6 3333 // Hz
#define FREQ7 3571 // Hz
#define FREQ8 3846 // Hz
#define FREQ9 4167 // Hz

// Switches
#define SW0 A2
#define SW1 A3
#define SW2 A4
#define SW3 A5
#define NUM_SWITCHES 4
unsigned int switchList[NUM_SWITCHES] = {SW0,SW1,SW2,SW3};

#define SW_THRESHOLD 10 // A logic '1' should have voltage = 0, but we give 10 for tolerance
unsigned int currentFrequency = 0; // The current player frequency

//Servo
#define AZMPIN 3
#define BASEPULSE_US 20000 // 50 Hz
#define CLOCKWISE_US 1000
#define CNTRCLOCKWISE_US 2000
#define SMALLCORRECTION (1.273)
#define US_PER_DEGREE 3.3E3


signed int currentAngle = 0;

#define MAXANGLE 90 // Used in setting current position limits in naming locations
#define MINANGLE 0
#define NUM_OF_BINS 4
#define ANGLESLICE_DEG ((MAXANGLE-MINANGLE)/NUM_OF_BINS)




//Sonar
#define SONARPIN 6
Sonar SONAR1(SONARPIN);

//Calibration
unsigned calibrationBin = 0; //The current bin that calibration is setting
bool countingDown = false;

unsigned long long killAllTimeMark = 0; //Start time that killAll was initiated
bool incFlag = true;
unsigned int locationCounter = 0; //Current bin to check for hits in
unsigned int nextLocationCounter = 0;

enum controlState_t {INIT, CALIBRATION, MOTION, SAMPLE, SOUNDALERT, KILLALL, REST};
controlState_t controlState = INIT;

#define MOTIONDELAY_MS 250
#define AFTERCALIBRATIONDELAY_MS 1000

void setup() {
  pinMode(AZMPIN, OUTPUT);
  pinMode(LEDPIN, OUTPUT);
  pinMode(SW0, INPUT);
  pinMode(SW1, INPUT);
  pinMode(SW2, INPUT);
  pinMode(SW3, INPUT);
  Serial.begin(9600);
  delay(1000); //Time for Serial to init
  SONAR1.reset();
}



void debugStatePrint()
{
  static controlState_t lastState = INIT;

  if (controlState != lastState)
  {
    lastState = controlState;
    Serial.println("CurrentState Is:");
    switch (controlState)
    {
      case INIT:
        Serial.println("INIT");
        break;

      case CALIBRATION:
        Serial.println("CALIBRATION");
        break;

      case MOTION:
        Serial.println("MOTION");
        break;

      case SAMPLE:
        Serial.println("SAMPLE");
        break;

      case SOUNDALERT:
        Serial.println("SOUNDALERT");
        break;

      case KILLALL:
        Serial.println("KILLALL");
        break;

      case REST:
        Serial.println("REST");
        break;

      default:
        Serial.println("default");
    }
  }
}
///////////////////////////////
////// SWICH SAMPLE /////////
/////////////////////////////



unsigned int getPlayerFrequency()
{
  String switchValue = "0000"; // Use a string to represent binary number

  for (unsigned int i = 0; i<NUM_SWITCHES; i++)
  {
    if (analogRead(switchList[i]) < SW_THRESHOLD)
    {
      switchValue.setCharAt(i,'1');
    }
  }
    if(switchValue == "0000")
    {
    return FREQ0;
    }else
    if(switchValue == "0001")
    {
    return FREQ1;
    }else
    if(switchValue == "0010")
    {
    return FREQ2;
    }else
    if(switchValue == "0011")
    {
    return FREQ3;
    }else
    if(switchValue == "0100")
    {
    return FREQ4;
    }else
    if(switchValue == "0101")
    {
    return FREQ5;
    }else
    if(switchValue == "0110")
    {
    return FREQ6;
    }else
    if(switchValue == "0111")
    {
    return FREQ7;
    }else
    if(switchValue == "1000")
    {
    return FREQ8;
    }else
    if(switchValue == "1001")
    {
    return FREQ9; 
    }else
    {
      return FREQ0; //DEFAULT
    } 
}


//////////////////////////
/////// LED control /////
////////////////////////

void ledOn()
{
   tone(LEDPIN, currentFrequency);
}

// Disable LED Strobe
void ledOff()
{
  noTone(LEDPIN);
}




void rotateCW(unsigned long duration)
{
  unsigned long startTime = micros();


  while ( (micros() - startTime) < duration  )
  {
    unsigned long pwmTime = micros();
    // OFF -> ON
    while ((micros() - pwmTime) < CLOCKWISE_US )
    {
      digitalWrite(AZMPIN, HIGH);
    }

    pwmTime = micros();

    while ( (micros() - pwmTime) < (BASEPULSE_US - CLOCKWISE_US) )
    {
      digitalWrite(AZMPIN, LOW);
    }

  }

}

void rotateCCW(unsigned long duration)
{
  unsigned long startTime = micros();


  while ( (micros() - startTime) < duration  )
  {
    unsigned long pwmTime = micros();
    // OFF -> ON
    while ((micros() - pwmTime) < CNTRCLOCKWISE_US )
    {
      digitalWrite(AZMPIN, HIGH);
    }

    pwmTime = micros();

    while ( (micros() - pwmTime) < (BASEPULSE_US - CLOCKWISE_US) )
    {
      digitalWrite(AZMPIN, LOW);
    }

  }
}

////////////////////
// ANGLE CODE /////
///////////////////

void goToDegree(signed int azm)
{
  //Serial.println("Target Angle");
  //Serial.println(azm);

  // Get the difference
  signed int difference = azm - getCurrentAngle();

  //Serial.println("Difference");
  //Serial.println(difference);

  // If difference is positive,


  if (difference > 0)
  {
    // Rotate  CCW
    if (difference < 180)
    {


      rotateDegCCW(difference);
    } else
    {

      rotateDegCW(360 - difference);
    }
  }

  if (difference < 0)
  {
    // Rotate  CCW
    if (abs(difference) < 180)
    {

      rotateDegCW(abs(difference));
    } else
    {


      rotateDegCCW(360 - abs(difference));
    }
  }
}

// Rotates the given number of degrees
void rotateDegCW(unsigned int azmDeg)
{
  double correction = 1.0;
  if (azmDeg < 20)
  {
    correction = SMALLCORRECTION;
  }

  unsigned long runTime = (azmDeg * US_PER_DEGREE * correction);
  signed int negDelta = -1 * azmDeg;
  updateAngle(negDelta);
  rotateCW(runTime);
}

// Rotates the given number of degrees
void rotateDegCCW(unsigned int azmDeg)
{
  double correction = 1.0;
  if (azmDeg < 20)
  {
    correction = SMALLCORRECTION;
  }

  unsigned long runTime = (azmDeg * US_PER_DEGREE * correction);
  updateAngle(azmDeg);
  rotateCCW(runTime);
}

// Updates the current location of the servo.
// Handles the rollover degrees
// positive deltaDeg is CW
// negative deltaDeg is CCW
void updateAngle(signed int deltaDeg)
{
  currentAngle = currentAngle + deltaDeg;

  // Handle Rollover
  if (currentAngle > MAXANGLE)
  {
    currentAngle = (currentAngle - MAXANGLE) + MINANGLE;
  }
  else if (currentAngle < MINANGLE)
  {
    currentAngle = MAXANGLE - abs(MINANGLE - currentAngle);
  }
  //Serial.println("Current Angle Is:");
  //Serial.println(currentAngle);
}

// Returns the current angular position
signed int getCurrentAngle()
{
  return currentAngle;
}





///////////////////////////////
////// State Machine /////////
/////////////////////////////

void controlSMtick()
{
debugStatePrint();

  switch (controlState)
  {
    case INIT:
      {
        locationCounter = 0;
        nextLocationCounter = 0;
        controlState = CALIBRATION;
        incFlag = true;
        calibrationBin = 0;
        countingDown = false;
      }
      break;

    case CALIBRATION:
      {
        delay(MOTIONDELAY_MS);
        
        signed int angle = (ANGLESLICE_DEG * calibrationBin);
        goToDegree(angle);
        int dist;
        SONAR1.setNormalRange(calibrationBin, &dist);
       
        Serial.println("Calibration bin, dist, stored");
        Serial.print(calibrationBin);
        Serial.print(" ,  ");
        Serial.print(dist);
        Serial.print(" , ");
        Serial.println(SONAR1.getDistanceAt(calibrationBin));
       
        if (calibrationBin == 0 && countingDown) {
          controlState = MOTION;
          delay(AFTERCALIBRATIONDELAY_MS);
          break;
        }
        else {
          controlState = CALIBRATION;
        }

        //Calculate next calibration bin position
        if (calibrationBin == NUM_OF_BINS) {
          countingDown = true;
        }

        if (countingDown) {
          --calibrationBin;
        }
        else {
          ++calibrationBin;
        }
        break;
      }

    case MOTION:
      {
        signed int angle = (ANGLESLICE_DEG * nextLocationCounter);
        /*
        Serial.print("move ");
        Serial.println(nextLocationCounter);
        */
        goToDegree(angle);
        delay(MOTIONDELAY_MS);
        controlState = SAMPLE;

        /* Why have nextLocationCounter, you ask? If we update
         *  locationCounter below and then go to the detect state,
         *  we will check the memory slot for the next location,
         *  not the one we are currently in, thus detecting phantom hits.
         */
        locationCounter = nextLocationCounter;

        if (incFlag)
        {
          if ((nextLocationCounter == NUM_OF_BINS))
          {
            nextLocationCounter--;
            incFlag = false;
          }
          else
          {
            nextLocationCounter++;
          }
        }
        else
        {
          if ((nextLocationCounter == 0))
          {
            nextLocationCounter++;
            incFlag  = true;
          }
          else
          {
            nextLocationCounter--;
          }
        }
      }
      break;

    case SAMPLE:
    
      int oldDist, newDist;
      //Use locationCounter here for the current location, not the new one just calculated
      if (SONAR1.hitDetected(locationCounter, &oldDist, &newDist)) {
        controlState = SOUNDALERT;
        currentFrequency = getPlayerFrequency();
      }
      else {
        controlState = MOTION;
      }
      
      Serial.println("old dist, new dist");
      Serial.print(oldDist);
      Serial.print(" , ");
      Serial.println(newDist);
      Serial.println("Player Frequency");
      Serial.println(currentFrequency);
      
      break;
    case SOUNDALERT:
      {
        controlState = KILLALL;
        killAllTimeMark = millis();
      }
      break;
    case KILLALL:
      {
        if ((millis() - killAllTimeMark) >= (KILLALLTIME_MS))
        {
          controlState = MOTION;
          ledOff();
        }
        else {
          ledOn();
          controlState = KILLALL;
        }
      }
      break;

    case REST:
      {
        controlState = MOTION;
      }
      break;
    default:
      {
        controlState = INIT;
      }
      break;
  }
}



void loop() {

controlSMtick();
}
